# NOTES:
# - GitHub Actions must be explicitly allowed to create pull requests in this repository.
#   This setting can be found in the repository's settings under Actions > General > Workflow permissions.
# - A repository secret `AUTO_RELEASE_TOKEN` (permissions: `contents: write`, `pull-requests: write`, `repositories: read`) needs to be created.
#   The secret should contain a github access token with the permissions specified above.
#   The secret is used by the `create-pull-request` action to create the pull request and `updatecli` to access all updateable repositories.
#   The secret can be created at https://github.com/mojaloop/helm/settings/secrets/actions

name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        description: "Branch to create release PR from (e.g. master, empty for PR branch)"
        required: false
        default: "master"
      release_name:
        type: string
        description: "Release name (e.g. Acacia)"
        required: false
      release_version:
        type: string
        description: "Release version (e.g. v1.0.0)"
        required: false
      last_release_tag:
        type: string
        description: "Last release tag (e.g. v1.0.0)"
        required: true
      example_backend_version:
        type: string
        description: "Example backend version (e.g. v1.0.0)"
        required: true
        default: "v15.0.0"
      deployment_release_name:
        type: string
        description: "Deployment release name (e.g. moja1)"
        required: true
        default: "moja2"
      deployment_namespace:
        type: string
        description: "Deployment namespace (e.g. moja1)"
        required: true
        default: "moja2"
      deployment_values_file:
        type: string
        description: "Deployment values file in oss-core-env repo"
        required: true
        default: "helm-values-moja2-mojaloop-v15.3.0.yaml"

jobs:
  create_release_pr:
    if: '!github.event.pull_request.draft'
    name: Create Release PR
    runs-on: ubuntu-latest
    env:
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      AWS_DEFAULT_OUTPUT: ${{ vars.AWS_DEFAULT_OUTPUT }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      EKS_CONFIG: ./config/test-mojaloop-live/eks-config.yml
    # permissions:
    #   contents: write
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 1

      # - name: Set up Helm
      #   id: setup-helm
      #   uses: azure/setup-helm@v3
      #   with:
      #     version: v3.13.3

      # - name: Install Dependencies
      #   id: install-dpendencies
      #   run: |
      #     # Install mo
      #     curl -sL https://raw.githubusercontent.com/tests-always-included/mo/master/mo -o /usr/local/bin/mo
      #     chmod +x /usr/local/bin/mo

      #     # Install updatecli
      #     curl -sL https://github.com/updatecli/updatecli/releases/download/v0.68.0/updatecli_amd64.deb -o /tmp/updatecli_amd64.deb
      #     sudo apt install /tmp/updatecli_amd64.deb

      #     # Install jq
      #     sudo apt-get install jq

      # - name: Update chart dependencies
      #   id: update-chart-dependencies
      #   env:
      #     AUTO_RELEASE_TOKEN: ${{ secrets.AUTO_RELEASE_TOKEN }}
      #   run: .github/workflows/scripts/update-charts.sh

      # - name: Generate changelog
      #   id: generate-changelog
      #   env:
      #     AUTO_RELEASE_TOKEN: ${{ secrets.AUTO_RELEASE_TOKEN }}
      #   run: .github/workflows/scripts/generate-changelog.sh

      - name: Determine release version number
        id: determine-release-version
        run: |
          if [[ -z '${{ inputs.release_version }}' ]]; then
            release_version=$(.github/workflows/scripts/determine-release-version.sh  ${{ inputs.last_release_tag }})
            export RELEASE_VERSION=$release_version
            echo "RELEASE_VERSION=$release_version" >> $GITHUB_OUTPUT
          else
            export RELEASE_VERSION=${{ inputs.release_version }}
            echo "RELEASE_VERSION=${{ inputs.release_version }}" >> $GITHUB_OUTPUT
          fi

      # - name: Prepare TTK test cases release
      #   id: prepare-ttk-test-cases-release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     token: ${{ secrets.AUTO_RELEASE_TOKEN }}
      #     repo: testing-toolkit-test-cases
      #     makeLatest: true
      #     allowUpdates: false
      #     generateReleaseNotes: true
      #     skipIfReleaseExists: true
      #     tag: ${{ steps.determine-release-version.outputs.RELEASE_VERSION }}
      #     commit: master

      # - name: Update TTK test-cases version to charts
      #   id: update-ttk-test-cases-version
      #   run: updatecli apply --config .github/workflows/manifests/first-pass/mojaloop.yaml

      # - name: Generate release note
      #   id: generate-release-note
      #   env:
      #     AUTO_RELEASE_TOKEN: ${{ secrets.AUTO_RELEASE_TOKEN }}
      #   run: .github/workflows/scripts/generate-release-note.sh '${{ inputs.release_name }}' '${{ steps.determine-release-version.outputs.RELEASE_VERSION }}' '${{ inputs.last_release_tag }}' '${{ inputs.example_backend_version }}'

      # - name: Create Pull Request
      #   id: create_pr
      #   uses: peter-evans/create-pull-request@v5
      #   with:
      #     token: ${{ secrets.AUTO_RELEASE_TOKEN }}
      #     commit-message: "chore: upgrade helm chart depdenencies"
      #     title: "[auto] feat: release candidate"
      #     body: |
      #       Release candidate for the next version of the helm charts.
      #     branch: release/release-candidate-${{ github.run_id }}
      #     base: master
      #     draft: true

      - name: Clone oss-core-env repository
        id: clone-oss-core-env
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.AUTO_RELEASE_TOKEN }}
          # repository: mojaloop/oss-core-env
          repository: oderayi/oss-core-env
          ref: main
          path: .tmp/oss-core-env
      
      - name: Prep deployment values file
        id: prep-deployment-values-file
        run: |
          set -a && . .tmp/oss-core-env/config/test-mojaloop-live/.env && set +a
          sed -i "s/{{CI_ENV_NAME}}/$ENV_NAME/" .tmp/oss-core-env/config/test-mojaloop-live/${{ inputs.deployment_values_file }}
          sed -i "s/{{CI_HELM_NAMESPACE}}/${{ inputs.deployment_namespace }}/" .tmp/oss-core-env/config/test-mojaloop-live/${{ inputs.deployment_values_file }}
          sed -i "s/{{CI_ENV_VERSION}}/${{ steps.determine-release-version.outputs.RELEASE_VERSION }}/" .tmp/oss-core-env/config/test-mojaloop-live/${{ inputs.deployment_values_file }}
      
      - name: Install YQ # Ref: https://mikefarah.gitbook.io/yq/
        run: |
           wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq &&\
           chmod +x /usr/local/bin/yq

      - name: Get EKS Cluster Name
        id: get-eks-cluster-name
        run: |
          export EKS_CLUSTER_NAME=$(cat .tmp/oss-core-env/config/test-mojaloop-live/eks-config.yml | yq '.metadata.name')
          echo "EKS_CLUSTER_NAME=$EKS_CLUSTER_NAME"
          echo "EKS_CLUSTER_NAME=$EKS_CLUSTER_NAME" >> $GITHUB_ENV
      
      - name: Set KubeConfig
        run: |
          echo "EKS_CLUSTER_NAME=$EKS_CLUSTER_NAME"
          aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKS_CLUSTER_NAME

      - name: Cluster Info
        run: |
          kubectl cluster-info
      
      - name: Deploy charts
        id: deploy-charts
        run: |
          echo "${{ secrets.AUTO_RELEASE_KUBECONFIG }}" > .tmp/test.mojaloop.live

          # Delete existing deployments
          helm ls -n ${{ inputs.deployment_namespace }} --short | xargs -L1 helm uninstall -n ${{ inputs.deployment_namespace }} # --kubeconfig=.tmp/test.mojaloop.live
          
          # Deploy example-backend
          helm install backend mojaloop/example-mojaloop-backend --namespace ${{ inputs.deployment_namespace }} # --kubeconfig=.tmp/test.mojaloop.live
          
          # Install Mojaloop
          helm install ${{ inputs.deployment_release_name }} ./mojaloop -f .tmp/oss-core-env/config/test-mojaloop-live/${{ inputs.deployment_values_file }} --namespace ${{ inputs.deployment_namespace }} # --kubeconfig=.tmp/test.mojaloop.live


      # - name: Deploy charts to test environment
      #   uses: 'deliverybot/helm@v1'
      #   with:
      #     token: ${{ secrets.AUTO_RELEASE_TOKEN }}
      #     release: ${{ inputs.deployment_release_name }}
      #     namespace: ${{ inputs.deployment_namespace }}
      #     chart: mojaloop
      #     value-files: |
      #       - .tmp/oss-core-env/${{ inputs.deployment_values_file}}
      #   env:
      #     KUBECONFIG_FILE: ${{ secrets.AUTO_RELEASE_KUBECONFIG }}
    
